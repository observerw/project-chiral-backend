generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------- 用户 --------------------------------------

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  phone    String?
  email    String? @unique
  avatar   String?
  salt     String

  project Project[]
}

// ---------------------------------- 事件 -------------------------------------

enum EventType {
  ATOM // 原子事件
  COLLECTION // 集合事件
}

model Event {
  id Int @id @default(autoincrement())

  serial Int

  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted DateTime?

  unit  Int
  start DateTime
  end   DateTime

  color String

  type EventType @default(ATOM)

  content    EventContent? @relation()
  contentId  Int?
  todos      EventTodo[]
  characters Character[]
  scenes     Scene[]
  sups       Event[]       @relation("contains")
  subs       Event[]       @relation("contains")

  done Boolean @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@unique([serial, projectId])
}

model EventContent {
  id Int @id @default(autoincrement())

  updatedAt DateTime @updatedAt

  cover   String?
  content String  @default("")

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int   @unique
}

model EventTodo {
  id Int @id @default(autoincrement())

  title   String
  color   String?
  checked Boolean @default(false)

  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?
}

// ----------------------------------- 角色 & 场景 --------------------------------------

model Character {
  id Int @id @default(autoincrement())

  name        String
  alias       String[]
  description String?
  avatar      String?

  deleted DateTime?

  // 角色的生卒年
  unit  Int?
  start DateTime?
  end   DateTime?

  events   Event[]
  // 角色可以复用到其他项目中
  projects Project[]
}

model Scene {
  id Int @id @default(autoincrement())

  name        String
  alias       String[]
  description String?

  deleted DateTime?

  // 某个场景可能是另一个场景的子场景，因此需要自引用
  super   Scene?  @relation("contains", fields: [superId], references: [id])
  superId Int?    @unique
  subs    Scene[] @relation("contains")

  events   Event[]
  // 场景可以复用到其他项目中
  projects Project[]
}

// ----------------------------------- 世界观 -------------------------------------

model Worldview {
  id Int @id @default(autoincrement())

  name        String
  description String?
  content     String   @default("")
  images      String[]

  deleted DateTime?

  // 文件夹结构
  super   Worldview?  @relation("contains", fields: [superId], references: [id])
  superId Int?        @unique
  subs    Worldview[] @relation("contains")

  // 世界观可以复用到其他项目中
  projects Project[]
}

// ----------------------------------- 项目 --------------------------------------

model Workspace {
  id Int @id @default(autoincrement())

  origin String?
  layout Json?
  lock   Boolean @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @unique
}

model Settings {
  id Int @id @default(autoincrement())

  darkMode Boolean @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @unique
}

model Project {
  id Int @id @default(autoincrement())

  // 事件计数，当创建新事件时递增
  serial Int @default(0)

  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted DateTime?

  events     Event[]
  characters Character[]
  scenes     Scene[]
  worldviews Worldview[]

  workspace Workspace?
  settings  Settings?

  user User[]
}
